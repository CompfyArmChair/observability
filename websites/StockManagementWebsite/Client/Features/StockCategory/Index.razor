@page "/"
@using Fluxor;
@using Microsoft.AspNetCore.SignalR.Client;
@using StockManagementWebsite.Client.Features.StockCategory.Store.Actions;
@using StockManagementWebsite.Shared.StockCategories;
@using StockManagementWebsite.Client.Features.StockCategory.Store;
@using StockManagementWebsite.Shared;

@inject NavigationManager NavManager;
@inject IDialogService DialogService;
@inject IDispatcher Dispatcher;
@inject IState<StockCategoriesState> CategoriesState;

@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@implements IAsyncDisposable

<MudContainer>
	<MudText Typo="Typo.h5">Stock Management</MudText>

	<TrackedMudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenAddCategoryDialog">Add Stock Category</TrackedMudButton>

	<MudTable Items="@CategoriesState.Value.Categories" Loading="@CategoriesState.Value.IsLoading" Class="mt-4">
		<HeaderContent>
			<MudTh>SKU</MudTh>
			<MudTh>Name</MudTh>
			<MudTh>Cost</MudTh>
			<MudTh>Quantity</MudTh>
			<MudTh>Actions</MudTh>
		</HeaderContent>
		<RowTemplate>			
			<MudTd>@context.Sku</MudTd>
			<MudTd>@context.Name</MudTd>
			<MudTd>@context.Cost.ToString("C")</MudTd>
			<MudTd>@context.Quantity</MudTd>
			<MudTd>
				<TrackedMudButton Color="Color.Secondary" OnClick="(() => OpenEditCategoryDialog(context))">
					<MudIcon Icon="@Icons.Material.Filled.Edit" />
				</TrackedMudButton>
				<TrackedMudButton Color="Color.Error" OnClick="(() => RemoveCategory(context.Sku))">
					<MudIcon Icon="@Icons.Material.Filled.Delete" />
				</TrackedMudButton>
				<TrackedMudButton Color="Color.Primary" OnClick="(() => NavigateToDetails(context.Sku))">
					<MudIcon Icon="@Icons.Material.Filled.ArrowForward" />
				</TrackedMudButton>
			</MudTd>
		</RowTemplate>
	</MudTable>
</MudContainer>


@code {
	private HubConnection? _hubConnection;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		Dispatcher.Dispatch(new FetchStockCategoriesAction());

		_hubConnection = new HubConnectionBuilder()
			.WithUrl(NavManager.ToAbsoluteUri("/StockManagementHub"))
			.Build();

		_hubConnection.On("CategoriesChanged", () =>
		{
			Console.WriteLine($"CategoriesChanged");
			Dispatcher.Dispatch(new FetchStockCategoriesAction());
		});

		await _hubConnection.StartAsync();
		Console.WriteLine($"Hubstate: {_hubConnection.State}");
	}

	private async Task OpenAddCategoryDialog()
	{
		var options = new DialogOptions { CloseOnEscapeKey = true };
		var dialog = await DialogService.ShowAsync<AddStockCategoryDialog>("Add Category", options);
		var result = await dialog.Result;

		if (!result.Canceled)
		{	
			var toAdd = (AddStockCategoryDto)result.Data;
			Dispatcher.Dispatch(new AddStockCategoryAction(new AddStockCategoryDto(toAdd.Sku, toAdd.Name, toAdd.Cost)));
		}
	}

	private async Task OpenEditCategoryDialog(StockCategoryDto category)
	{
		var parameters = new DialogParameters<EditStockCategoryDialog>();
		parameters.Add(x => x.CategoryToEdit, category);

		var options = new DialogOptions { CloseOnEscapeKey = true };

		var dialog = await DialogService.ShowAsync<EditStockCategoryDialog>("Edit Category", parameters, options);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			var toEdit = (EditStockCategoryDto)result.Data;
			Dispatcher.Dispatch(
				new EditStockCategoryAction(
					new EditStockCategoryDto(toEdit.Sku, toEdit.Name, toEdit.Cost)));
		}
	}

	private void RemoveCategory(string sku)
	{
		Dispatcher.Dispatch(new RemoveStockCategoryAction(sku));
	}

	private void NavigateToDetails(string sku)
	{
		NavManager.NavigateTo($"/stock-items/{sku}");
	}

	public async ValueTask DisposeAsync()
	{
		if (_hubConnection is not null)
		{
			await _hubConnection.DisposeAsync();
		}
	}
}